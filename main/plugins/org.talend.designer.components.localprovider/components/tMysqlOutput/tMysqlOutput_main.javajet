<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
    org.talend.core.model.process.IProcess
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	IProcess process = node.getProcess();
	String cid = node.getUniqueName();

	dbLog = new DBLogUtil(node);

	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
	String table = ElementParameterParser.getValue(node,"__TABLE__");
	String dbVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
    boolean onErrDie = "true".equals(dieOnError);
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));

    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");

    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

    String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");

    boolean extendedInsert = ("true").equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));

        //to fixed: bug8422
        if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))||(!("INSERT").equals(dataAction))){
        	extendedInsert = false;
        }

    String numPerInsert = ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__");
    boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));

	//feature:2880
    getManager(dbmsId, cid, node);
    boolean whereSupportNull = ElementParameterParser.getValue(node, "__SUPPORT_NULL_WHERE__").equals("true");

	boolean useBatchSize = ("true").equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));
	String batchSize=ElementParameterParser.getValue(node,"__BATCH_SIZE__");

	String incomingConnName = null;
	List<IMetadataColumn> columnList = getColumnList(node);

	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns!=null && conns.size()>0){
		IConnection conn = conns.get(0);
		incomingConnName = conn.getName();
	}

	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
	    IConnection rejectConn = rejectConns.get(0);
	    rejectConnName = rejectConn.getName();
	}
	List<IMetadataColumn> rejectColumnList = null;
	IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
	if(metadataTable != null) {
	    rejectColumnList = metadataTable.getListColumns();
	}

	List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    for(IConnection conn : outgoingConns) {
        if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
            <%=conn.getName() %> = null;
<%
        }
    }

	Manager manager = null;
	boolean isDynamic = false;
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		isDynamic = metadata.isDynamicSchema();
	}

	List<Column> stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
	isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();
	IMetadataColumn talendDynCol = null;
	if(isDynamic) {
	%>
		if(nb_line_<%=cid%>==0) {
	<%
		///// hint options/////
boolean useHintOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_HINT_OPTIONS__"));
Map<String, String> hintsValues = null;
if (useHintOptions) {
	List<Map<String, String>> hintOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HINT_OPTIONS__");
	hintsValues = new HashMap<String, String>();
	String hintValue = null;
	boolean firstInsert = true;
	boolean firstUpdate = true;
	boolean firstDelete = true;
	boolean firstTableName = true;
	for(java.util.Map<String, String> option : hintOptions) {
		//get
		hintValue = option.get("HINT");
		//set
		if ("INSERT".equalsIgnoreCase(option.get("SQL_STMT"))){
			if(firstInsert){
				hintsValues.put("INSERT", hintValue) ;
				firstInsert = false;
			}else {
				hintsValues.put("INSERT", hintsValues.get("INSERT") + "+" + hintValue) ;
			}
		}else if ("UPDATE".equalsIgnoreCase(option.get("SQL_STMT"))) {
			if(firstUpdate){
				hintsValues.put("UPDATE", hintValue) ;
				firstUpdate = false;
			}else {
				hintsValues.put("UPDATE", hintsValues.get("UPDATE") + "+" + hintValue) ;
			}
		}else if ("DELETE".equalsIgnoreCase(option.get("SQL_STMT"))) {
			if (firstDelete){
				hintsValues.put("DELETE", hintValue) ;
				firstDelete =false;
			}else {
				hintsValues.put("DELETE", hintsValues.get("DELETE") + "+" + hintValue) ;
			}
		}
	}
}
//// hint options end ////

if(columnList != null && columnList.size() > 0) {
    %>
    	<%@ include file="../templates/_tableActionForOutput.javajet"%>
    <%
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);
    talendDynCol = getDynamicColumn();
    boolean supportDuplicateUpdate = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__ON_DUPLICATE_KEY_UPDATE__"));

	if(("INSERT").equals(dataAction)) {

		if (supportDuplicateUpdate) {
			List<Map<String, String>> duplicateKeys = (List<Map<String,String>>)ElementParameterParser.getObjectValue( node,"__DUPLICATED_KEYS__" );

			if (duplicateKeys.size() > 0) {
			%>
			StringBuffer duplidateClause_<%=cid%> = new StringBuffer(" ON DUPLICATE KEY UPDATE ");
				<%
				for (int i=0; i< duplicateKeys.size() ; i++) {
					if (i >0) {
					%>
						duplidateClause_<%=cid%>.append(",");
					<%
					}
					%>
						duplidateClause_<%=cid%>.append ("`" +  <%=duplicateKeys.get(i).get("DUPLICATED_KEY")%> + "`");
						duplidateClause_<%=cid%>.append ("=");
						duplidateClause_<%=cid%>.append (<%=duplicateKeys.get(i).get("DUPLICATED_VALUE")%>);
				<%
				}
			}
		}
%>

<%
		    if(!extendedInsert) {
			List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
				if(conns_dynamic!=null && conns_dynamic.size()>0){
					IConnection conn = conns_dynamic.get(0);

					if(!("".equals(insertColName.toString()))) {
%>
						String insert_<%=cid%> = "INSERT INTO `" + tableName_<%=cid%> + "` (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%					} else {
%>
						String insert_<%=cid%> = "INSERT INTO `" + tableName_<%=cid%> + "` ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%
					}
				}

		        %>
<%
				if (supportDuplicateUpdate) {
%>
				insert_<%=cid%> += 	duplidateClause_<%=cid%>.toString();
<%
				}
%>
				<%@ include file="../templates/_hintInsert.javajet" %>

                <%
                //to fixed: bug8422
                if(!(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){%>
                        pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
                <%}%>

                <%
                //to fixed: bug8422
                if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){ %>
                		pstmt_<%=cid %> = null;
                        // [%connection%][psmt][tableName]
                        String keyPsmt_<%=cid %> = conn_<%=cid%> + "[psmt]" + "[" + <%=table%> + "]";
                		if(GlobalResource.resourceMap.get(keyPsmt_<%=cid %>)== null){
                			pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
                			GlobalResource.resourceMap.put(keyPsmt_<%=cid %>, pstmt_<%=cid %>);
                		}else{
                			pstmt_<%=cid %> = (java.sql.PreparedStatement)GlobalResource.resourceMap.get(keyPsmt_<%=cid %>);
                		}
                <%}%>

<%
	    } else {//extended-insert mode(begin)
	    	if ("MYSQL_4".equals(dbVersion)) {
%>
	            ////////////////////////////////////////////////////////////////////////////////////////////


	            StringBuilder extendInsertValueStmt_<%=cid%> = new StringBuilder();
                for(int i=0;i < <%=numPerInsert%>;i++){
<%
			if(isDynamic) {
			     List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
			     if(conns_dynamic!=null && conns_dynamic.size()>0){
			     	IConnection conn = conns_dynamic.get(0);
%>
                    extendInsertValueStmt_<%=cid%>.append("(<%=insertValueStmt.toString()%>,"+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")");
<%
				}
			} else {
%>
				    extendInsertValueStmt_<%=cid%>.append("(<%=insertValueStmt.toString()%>)");
<%
			}
%>
                if (i!=<%=numPerInsert%>-1) extendInsertValueStmt_<%=cid%>.append(",");
                }
<%
				List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
				if(conns_dynamic!=null && conns_dynamic.size()>0){
					IConnection conn = conns_dynamic.get(0);
					if(!("".equals(insertColName.toString()))) {
%>
						insert_<%=cid%> = "INSERT INTO `" + <%=table%> + "` (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES " + extendInsertValueStmt_<%=cid%>.toString();
<%					} else {
%>
						insert_<%=cid%> = "INSERT INTO `" + <%=table%> + "` ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES " + extendInsertValueStmt_<%=cid%>.toString();
<%
					}
				if (supportDuplicateUpdate) {
%>
				    insert_<%=cid%> += 	duplidateClause_<%=cid%>.toString();
<%
				}
%>
					<%@ include file="../templates/_hintInsert.javajet" %>
				    pstmt_<%=cid %> =  conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
<%
					if(!("".equals(insertColName.toString()))) {
%>

				    insertColName<%=cid%> = "<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>");
				    insertColValue<%=cid%> =  "<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>);
<%
					} else {
%>
	      			insertColName<%=cid%> = DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>");
				    insertColValue<%=cid%> =  DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>);
<%
					}
				}
		    if(isDynamic) {
%>
			    rowCount<%=cid%> = 0;
<%
		    } else {
%>
	            int rowCount<%=cid%> = 0;
<%
		    }
		} else if ("MYSQL_5".equals(dbVersion)) {
				List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
				if(conns_dynamic!=null && conns_dynamic.size()>0){
					IConnection conn = conns_dynamic.get(0);
					if(!("".equals(insertColName.toString()))) {
%>
						String insert_<%=cid%> = "INSERT INTO `" + <%=table%> + "` (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%					} else {
%>
						String insert_<%=cid%> = "INSERT INTO `" + <%=table%> + "` ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%
					}
				}
				if (supportDuplicateUpdate) {
%>
					    insert_<%=cid%> += 	duplidateClause_<%=cid%>.toString();
<%
				}
				if(isDynamic) {
%>
					    batchSize_<%=cid%> = <%=numPerInsert%>;
		   			    batchSizeCounter_<%=cid%>=0;
<%
				} else {
%>
					    int batchSize_<%=cid%> = <%=numPerInsert%>;
		   			    int batchSizeCounter_<%=cid%>=0;
<%
				}
%>
		        <%@ include file="../templates/_hintInsert.javajet" %>
		        pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);


<%
	       	}
	    }//extended-insert mode(end)
	} else if (("UPDATE").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
		if(conns_dynamic!=null && conns_dynamic.size()>0){
			IConnection conn = conns_dynamic.get(0);
			if(!("".equals(updateSetStmt.toString()))) {
%>
				String update_<%=cid%> = "UPDATE `" + tableName_<%=cid%> + "` SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%			} else {
%>
				String update_<%=cid%> = "UPDATE `" + tableName_<%=cid%> + "` SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
			}
		}
	    %>
	    <%@ include file="../templates/_hintUpdate.javajet" %>
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
	    <%
	} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
			List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
			if(conns_dynamic!=null && conns_dynamic.size()>0){
				IConnection conn = conns_dynamic.get(0);

				if(!("".equals(insertColName.toString()))) {
%>
					String insert_<%=cid%> = "INSERT INTO `" + tableName_<%=cid%> + "` (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%					} else {
%>
					String insert_<%=cid%> = "INSERT INTO `" + tableName_<%=cid%> + "` ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%
				}
				if(!("".equals(updateSetStmt.toString()))) {
%>
					String update_<%=cid%> = "UPDATE `" + tableName_<%=cid%> + "` SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%				} else {
%>
					String update_<%=cid%> = "UPDATE `" + tableName_<%=cid%> + "` SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
				}
			}
	    %>
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM `" + <%=table%> + "` WHERE <%=updateWhereStmt.toString()%>");//String insert_<%=cid%> = "INSERT INTO `" + <%=table%> + "` (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
	    <%@ include file="../templates/_hintInsert.javajet" %>
	    pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
	    <%@ include file="../templates/_hintUpdate.javajet" %>
	    pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
	    <%
	} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
			List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
			if(conns_dynamic!=null && conns_dynamic.size()>0){
				IConnection conn = conns_dynamic.get(0);

				if(!("".equals(insertColName.toString()))) {
%>
					String insert_<%=cid%> = "INSERT INTO `" + tableName_<%=cid%> + "` (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%					} else {
%>
					String insert_<%=cid%> = "INSERT INTO `" + tableName_<%=cid%> + "` ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%
				}
				if(!("".equals(updateSetStmt.toString()))) {
%>
					String update_<%=cid%> = "UPDATE `" + tableName_<%=cid%> + "` SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%				} else {
%>
					String update_<%=cid%> = "UPDATE `" + tableName_<%=cid%> + "` SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
				}
			}
	    %>
	    <%@ include file="../templates/_hintUpdate.javajet" %>
	    pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
	    <%@ include file="../templates/_hintInsert.javajet" %>
	    pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
	    <%
	} else if (("DELETE").equals(dataAction)) {
	    %>
	    String delete_<%=cid%> = "DELETE FROM `" + <%=table%> + "` WHERE <%=deleteWhereStmt.toString()%>";
	    <%@ include file="../templates/_hintDelete.javajet" %>
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
	    <%
	} else if(("REPLACE").equals(dataAction)) {
	    %>
	    String replace_<%=cid%> = "REPLACE INTO `" + <%=table%> + "` (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(replace_<%=cid%>);
	    <%
	} else if(("INSERT_ON_DUPLICATE_KEY_UPDATE").equals(dataAction)) {
	    %>
	    String insertIgnore_<%=cid%> = "INSERT IGNORE INTO `" + <%=table%> + "` (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>) ON DUPLICATE KEY UPDATE <%=updateSetStmt.toString()%>";
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insertIgnore_<%=cid%>);
	    <%
	} else if(("INSERT_IGNORE").equals(dataAction)) {
	    %>
	    String insert_<%=cid%> = "INSERT IGNORE INTO `" + <%=table%> + "` (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
	    <%@ include file="../templates/_hintInsert.javajet" %>
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
	    <%
	}
    if(isEnableDebug) {
        %>
       	<%@ include file="../templates/DB/Output/splitSQLForAllDBInDynamicMain.javajet" %>
        <%
    }
}
	%>
		}
	<%
	}


    ////////////////////////////////////////////////////////////
    List<Column> colStruct =  new ArrayList();
    for(Column colStmt : stmtStructure){
    	if(!colStmt.isReplaced() && !colStmt.isAddCol() && !colStmt.isDynamic()){
    		colStruct.add(colStmt);
    	}
    }

	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	if(("true").equals(useExistingConn)) {
		if(connection.matches("^.*?tAmazonAuroraConnection_\\d+$")){
				  dbVersion = "MYSQL_5";
			}else{
				List<? extends INode> nodes =  process.getNodesOfType("tMysqlConnection");
				for (INode ne:nodes) {
					if (connection.equals(ne.getUniqueName())) {
						dbVersion = ElementParameterParser.getValue(ne, "__DB_VERSION__");
					}
				}
			}
	} else {
		dbVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");
	}

    class ExtendInsertOperation{
        public String generateType(String typeToGenerate){
            if(("byte[]").equals(typeToGenerate)){
                typeToGenerate = "Bytes";
            }else if(("java.util.Date").equals(typeToGenerate)){
                typeToGenerate = "Date";
            }else if(("Integer").equals(typeToGenerate)){
                typeToGenerate = "Int";
            }else if(("List").equals(typeToGenerate)){
                typeToGenerate = "Object";
            }else{
                typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
            }
            return typeToGenerate;
        }

        public void generateSetStmt(String typeToGenerate, Column column, String incomingConnName, String cid){
            boolean isObject = false;
            String prefix = "pstmt_";
            %>

            <%
            if(("Character").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.CHAR);
                    <%
            }else if(("Date").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DATE);
                    <%
            }else if(("byte[]").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.ARRAY);
                    <%
            }else if(("Long").equals(typeToGenerate)||("Byte").equals(typeToGenerate)||("Integer").equals(typeToGenerate)||("Short").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.INTEGER);
                    <%
            }else if(("String").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.VARCHAR);
                    <%
            }else if(("Object").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.OTHER);
                    <%
            }else if(("Boolean").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.BOOLEAN);
                    <%
            }else if(("Double").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DOUBLE);
                    <%
            }else if(("Float").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.FLOAT);
                    <%
            }
            if(isObject){
                %>
                }else{
                <%
            }
            typeToGenerate = generateType(typeToGenerate);

            if(("Char").equals(typeToGenerate)||("Character").equals(typeToGenerate)){
                %>
                <%
                if(isObject) {
                    %>
                    if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%
                } else {
                    %>
                    if(("null").equals(String.valueOf(<%=incomingConnName%>.<%=column.getName()%>).toLowerCase())){
                    <%
                }
                %>
                <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.CHAR);

                }else if(<%=incomingConnName%>.<%=column.getName()%> == '\0'){

                    <%=prefix+cid%>.setString(counter<%=cid%>,"");

                }else{

                    <%=prefix+cid%>.setString(counter<%=cid%>,String.valueOf(<%=incomingConnName%>.<%=column.getName()%>));
                }
                <%
            }else if(("Date").equals(typeToGenerate)){
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>!=null){
                    // timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
                    date_<%=cid %> = <%=incomingConnName%>.<%=column.getName()%>.getTime();
                    if (date_<%=cid %> < year1_<%=cid %> || date_<%=cid %> >= year10000_<%=cid %>) {
                        <%=prefix+cid%>.setString(counter<%=cid%>, "0000-00-00 00:00:00");
                    } else {
                        <%=prefix+cid%>.setTimestamp(counter<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
                    }
                }else{

                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DATE);

                }
                <%
            }else{
                %>
                <%=prefix+cid%>.set<%=typeToGenerate%>(counter<%=cid%>,<%=incomingConnName%>.<%=column.getName()%>);
                <%
            }
            if(isObject){
                %>

                }

            <%
            }
        }
    }

	if(isEnableDebug) {
%>
		query_<%=cid%> = new StringBuffer("");
<%
	}

	boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));

	if (isParallelize) { // bug0014422
		String tAsyncIn_cid = "";
		if(conns!=null && conns.size() > 0) {
			tAsyncIn_cid = conns.get(0).getSource().getUniqueName();
		}
		if(!"true".equals(useExistingConn)) {
	    	if(!("").equals(commitEvery)&&!("0").equals(commitEvery)) {
%>
				commitEvery_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
	    	}
	    }
	    if ("MYSQL_5".equals(dbVersion)) {
	    	if ((extendedInsert&&"INSERT".equals(dataAction)) || (useBatchSize&&("UPDATE".equals(dataAction)||"DELETE".equals(dataAction)))) {
			    if((!("").equals(numPerInsert)&&!("0").equals(numPerInsert))
			    	||(!("").equals(batchSize)&&!("0").equals(batchSize))) {
%>
					batchSize_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
			    }
	    	}
    	}
%>

<%
	}

    if(incomingConnName != null && columnList != null){
        %>
        whetherReject_<%=cid%> = false;
        <%
        if(("INSERT").equals(dataAction)) {
            if(extendedInsert) {//extended-insert mode(begin)
            	if ("MYSQL_4".equals(dbVersion)) {
	                ExtendInsertOperation eiOperation = new ExtendInsertOperation();
	                int insertableCount = 0;
	                for(Column column : colStruct) {
	                    if(column.isInsertable()) {
	                        insertableCount++;
	                    }
	                }
			if(!isDynamic) {
	                %>
	                	int counter<%=cid%> = rowCount<%=cid%> * <%=insertableCount%> + 1;
	                <%
			}
	                for(Column column : colStruct) {
	                    if(column.isInsertable()) {
	                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
	                        eiOperation.generateSetStmt(typeToGenerate,column,incomingConnName,cid);
	                        %>
	                        counter<%=cid%>++;
	                        <%
	                    }
	                }
					if(isDynamic) {
						Column dynamicColumn = getColumn(getDynamicColumn());
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
						if("Dynamic".equals(typeToGenerate)) {
						%>
							int count_dyn_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, counter<%=cid%>-1, "<%=dbmsId%>");
							counter<%=cid%>+=count_dyn_<%=cid%>;
						<%
						}
					}
	                %>

	                exInsertColValue<%=cid%> = new BufferLine_<%=cid%>(
	                <%
	                int count =0;
	                for(Column column : colStruct) {
	                    if(column.isInsertable()) {
	                        if(count != 0) {
	                            %>
	                            ,
	                            <%
	                        }
	                        %>
	                        <%=incomingConnName%>.<%=column.getName()%>
	                        <%
	                        count++;
	                    }
	                }
			if(isDynamic) {
			    	Column dynamicColumn = getColumn(getDynamicColumn());
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
				%>
					, <%=incomingConnName%>.<%=dynamicColumn.getName()%>
				<%
				}
			    }
	                %>
	                );

	                exInsertColValueList<%=cid%>.add(exInsertColValue<%=cid%>);

	                rowCount<%=cid%>++;
<%
			if(isDynamic) {
%>
				nb_line_<%=cid%>++;
<%
			}
%>
	                if(rowCount<%=cid%> == <%=numPerInsert%>){
	                    try{
	                    	insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
	                    }catch(java.lang.Exception e){
                    	<% if(onErrDie){%>
                    	     throw e;
			        	<% }else{
		        			 dbLog.logPrintedException("e.getMessage()");%>
		        			 System.err.println(e.getMessage());
		        		<%}%>
	                    }
	                    exInsertColValueList<%=cid%>.clear();
	                    rowCount<%=cid%> = 0;
					    counter<%=cid%>=1;
	                }
<%
				} else if ("MYSQL_5".equals(dbVersion)) {
	 				int counter = 1;
	                for(Column column : colStruct) {
	                    if(column.isInsertable()) {
	                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
	                        %>
	                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
	                        <%
	                        if(isEnableDebug) {
	                            %>
	                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
	                            <%
	                        }
	                        counter++;
	                    }

	                }
					if(isDynamic) {
						Column dynamicColumn = getColumn(getDynamicColumn());
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
						if(isEnableDebug) {
						%>
							routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counter%>,insertSQLSplits_<%=cid%>);
						<%
						}
						if("Dynamic".equals(typeToGenerate)) {
						%>
							DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
						<%
						}
					}

	                if(isEnableDebug) {
	                    %>
	                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
	                    <%
	                }
	                %>
					<%if (rejectConnName == null) { // modification one
		    		%>
		    		pstmt_<%=cid %>.addBatch();
		    		nb_line_<%=cid%>++;

		    			<%dbLog.data().addingToBatch(dbLog.var("nb_line"), dbLog.str(dataAction));%>
		    		  	<%
		    		  	if (!("").equals(numPerInsert ) && !("0").equals(numPerInsert )) {
		    		  %>
		    		  batchSizeCounter_<%=cid%>++;
		    		  <%
		    		  	}
		    		  	%>
		    		<%
		    		}else {
		    		%>
	                try {
	                    nb_line_<%=cid%>++;
	                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
	                    <%dbLog.data().inserting(dbLog.var("nb_line"));%>
	                } catch(java.lang.Exception e) {
	                    whetherReject_<%=cid%> = true;
	                    <%
	                    if (("true").equals(dieOnError)) {
	                        %>
	                        throw(e);
	                        <%
	                    } else {
	                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
	                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
	                            <%
	                            for(IMetadataColumn column : columnList) {
	                             %>
	                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
	                            <%
	                            }
	                            %>
	                            rejectedCount_<%=cid%> =  rejectedCount_<%=cid%>+ 1;
	                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
	                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
	                            <%
	                        } else {
	                        	dbLog.logPrintedException("e.getMessage()");
	                            %>
	                            System.err.print(e.getMessage());
	                            <%
	                        }
	                    }
	                    %>
	                }
				<%
    			}
    			%>
<%
				}
            } else {//extended-insert mode(end)
                int counter = 1;
                for(Column column : colStruct) {
                    if(column.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                            <%
                        }
                        counter++;
                    }

                }

				if(isDynamic) {
					Column dynamicColumn = getColumn(getDynamicColumn());
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if(isEnableDebug) {
					%>
					routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counter%>,insertSQLSplits_<%=cid%>);
					<%
					}
					if("Dynamic".equals(typeToGenerate)) {
					%>
						DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
					<%
					}
				}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }
                %>
                try {
                    nb_line_<%=cid%>++;
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                    <%dbLog.data().inserting(dbLog.var("nb_line"));%>
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> =  rejectedCount_<%=cid%>+ 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                        	dbLog.logPrintedException("e.getMessage()");
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    }
                    %>
                }
                <%
            }
    	} else if(("UPDATE").equals(dataAction)) {
    	    int counterCol = 1;
    		for(Column column : colStruct) {
    			if(column.isUpdatable()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    			    %>
    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
    			    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                        <%
                    }
                    counterCol++;
    			}
    		}
			if(isDynamic) {
				Column dynamicColumn = getColumn(getDynamicColumn());
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
					if(isEnableDebug) {
					%>
					    routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterCol%>,updateSQLSplits_<%=cid%>);
					<%
					}
				%>

					int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
				<%
				}
			}

    		for(Column column:colStruct){
    			if(column.isUpdateKey()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    			    String dbType = column.getColumn().getType();
                    %>

					<%
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) {
		    	if(isDynamic){
			%>
			   <%=getManager(dbmsId, cid).generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
			<%
			}else{
			%>
			   <%=getManager(dbmsId, cid).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
			<%
			}
					if(isEnableDebug) {
						if(isDynamic){
						%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
						<%
						}else{
						%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
						<%
						}
                    }
                    	counterCol++;
                       }
                     //#############
                    %>
    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE, " + count_")%>
    			    <%
                    if(isEnableDebug) {
				    if(isDynamic){
				    %>
					   query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
				    <%
				    }else{
				    %>
					   query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
				    <%
				    }
                    }
    			    counterCol++;
    			}
    		}
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }
    		%>

    		<%if (rejectConnName == null && useBatchSize && "MYSQL_5".equals(dbVersion)) { // whether use batch
    		%>
    		pstmt_<%=cid %>.addBatch();
    		nb_line_<%=cid%>++;

    		  	<%dbLog.data().addingToBatch(dbLog.var("nb_line"), dbLog.str(dataAction));%>
    		  	<%
    		  	if (useBatchSize && !("").equals(batchSize) && !("0").equals(batchSize)) {
    		  %>
    		  batchSizeCounter_<%=cid%>++;
    		  <%
    		  	}
    		  	%>
    		<%
    		}else {
    		%>
            try {
                nb_line_<%=cid%>++;
                updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                <%dbLog.data().updating(dbLog.var("nb_line"));%>
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                    <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> =  rejectedCount_<%=cid%>+ 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                    	dbLog.logPrintedException("e.getMessage()");
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                }
                %>
            }
            <%
            } // end whether use batch
            %>
            <%
    	} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
    		int columnIndex = 1;
    		for(Column column : colStruct) {
    			if(column.isUpdateKey()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    			    String dbType = column.getColumn().getType();
                    %>
					<%
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    	columnIndex++;
                       }
                     //#############
                    %>
    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
    			    <%
    			    columnIndex++;
    			}
    		}
    		%>

    		java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery();
    		int checkCount_<%=cid%> = -1;
    		while(rs_<%=cid%>.next()) {
    			checkCount_<%=cid%> = rs_<%=cid%>.getInt(1);
    		}
    		if(checkCount_<%=cid%> > 0) {
    			<%
    			int counterCol = 1;
    			for(Column column : colStruct) {
    				if(column.isUpdatable()) {
    				    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    				    %>
    				    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
    				    <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                            <%
                        }
    				    counterCol++;
    				}
    			}
				if(isDynamic) {
					Column dynamicColumn = getColumn(getDynamicColumn());
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
						if(isEnableDebug) {
						%>
							routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterCol%>,updateSQLSplits_<%=cid%>);
						<%
						}
						%>

						int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
					<%
					}
				}
    			for(Column column : colStruct) {
    				if(column.isUpdateKey()) {
    				    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    				    String dbType = column.getColumn().getType();
                        %>
                        <%
	                    //#############for feature:2880
	                    if(whereSupportNull && column.getColumn().isNullable()) {
			    	if(isDynamic){
				%>
					<%=getManager(dbmsId, cid).generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
				<%
				}else{
				%>
					<%=getManager(dbmsId, cid).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
				<%
				}
		                     if(isEnableDebug) {
	                        			if(isDynamic){
							%>
								query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
							<%
							}else{
							%>
								query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
							<%
							}
	                    	}
	                    	counterCol++;
	                       }
	                     //#############
	                    %>
    				    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE, " + count_")%>
    				    <%
                        if(isEnableDebug) {
                            if(isDynamic){
				   		%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
				    	<%
				    	}else{
				    	%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
				    	<%
				    	}
                        }
    				    counterCol++;
    				}
    			}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }
    			%>
                try {
                    updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate();
                    nb_line_<%=cid%>++;
        			<%dbLog.data().updating(dbLog.var("nb_line"));%>
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                    %>
                    	nb_line_<%=cid%>++;
                    	<%
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> =  rejectedCount_<%=cid%>+ 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                        	dbLog.logPrintedException("e.getMessage()");
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    }
                    %>
                }
    		} else {
    			<%
    			int counterInsert = 1;
    			for(Column columnInsert : colStruct)
    			{
    				if(columnInsert.isInsertable()) {
    				    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
    				    %>
    				    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnInsert, counterInsert, incomingConnName, cid, INSERT_TYPE)%>
    				    <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_" ,  counterInsert, "insertSQLSplits_")%>;
                            <%
                        }
    				    counterInsert++;
    				}
    			}
				if(isDynamic) {
					Column dynamicColumn = getColumn(getDynamicColumn());
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if(isEnableDebug) {
					%>
						routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterInsert%>,insertSQLSplits_<%=cid%>);
					<%
					}
					if("Dynamic".equals(typeToGenerate)) {
					%>
						DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counterInsert-1%>, "<%=dbmsId%>");
					<%
					}
				}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }
    			%>
                try {
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
                    nb_line_<%=cid%>++;
                    <%dbLog.data().inserting(dbLog.var("nb_line"));%>
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                    %>
                    	nb_line_<%=cid%>++;
                    	<%
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> =  rejectedCount_<%=cid%>+ 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                        	dbLog.logPrintedException("e.getMessage()");
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    }
                    %>
                }
    		}
    		<%
    	} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
    	    %>
    	    int updateFlag_<%=cid%>=0;
    	    <%
    		int counterColUpdate = 1;
    		for(Column columnUpdate : colStruct) {
    			if(columnUpdate.isUpdatable()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
    			    %>
    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
    			    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                        <%
                    }
    			    counterColUpdate++;
    			}
    		}
			if(isDynamic) {
				Column dynamicColumn = getColumn(getDynamicColumn());
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
					if(isEnableDebug) {
					%>
						routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterColUpdate%>,updateSQLSplits_<%=cid%>);
					<%
					}
					%>

					int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterColUpdate-1%>, "<%=dbmsId%>");
				<%
				}
			}

    		for(Column columnUpdate : colStruct) {
    			if(columnUpdate.isUpdateKey()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
    			    String dbType = columnUpdate.getColumn().getType();
                    %>
					<%
                    //#############for feature:2880 and 6980
				if(whereSupportNull && columnUpdate.getColumn().isNullable()) {
					if(isDynamic){
					%>
    					<%=getManager(dbmsId, cid).generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
					<%
					}else{
					%>
    					<%=getManager(dbmsId, cid).generateSetBooleanForNullableKeyStmt(columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
					<%
					}
					if(isEnableDebug) {
						if(isDynamic){
						%>
						query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null)?1:0)")%>;
						<%
						}else{
						%>
						query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null)?1:0)")%>;
						<%
						}
					}
					counterColUpdate++;
                       }
                     //#############
                    %>

    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE, " + count_")%>
    			    <%
                    if(isEnableDebug) {
                        if(isDynamic){
					%>
						query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
					<%
					}else{
					%>
						query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
					<%
					}
                    }
    			    counterColUpdate++;
    			}
    		}
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }
    		%>

            try {
                updateFlag_<%=cid%>=pstmtUpdate_<%=cid %>.executeUpdate();
                updatedCount_<%=cid%> = updatedCount_<%=cid%>+updateFlag_<%=cid%>;

            if(updateFlag_<%=cid%> == 0) {

            	<%
            	if(isEnableDebug) {
            	%>
				query_<%=cid%> = new StringBuffer("");
        		<%
        		}
        		int counter = 1;

        		for(Column column : colStruct) {
        			if(column.isInsertable()) {
        			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
        			    %>
        			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, INSERT_TYPE)%>
        			    <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                            <%
                        }
        			    counter++;
        			}
        		}
				if(isDynamic) {
					Column dynamicColumn = getColumn(getDynamicColumn());
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
						if(isEnableDebug) {
	    					%>
							routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counter%>,insertSQLSplits_<%=cid%>);
						<%
	    					}
						%>
						DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
					<%
					}
				}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }
        		%>
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
             		nb_line_<%=cid%>++;
                    <%dbLog.data().inserting(dbLog.var("nb_line"));%>
    			}else{
    				nb_line_<%=cid%>++;
    				<%dbLog.data().updating(dbLog.var("nb_line"));%>
             }
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                    %>
                    	nb_line_<%=cid%>++;
                    	<%
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> =  rejectedCount_<%=cid%>+ 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                        	dbLog.logPrintedException("e.getMessage()");
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    }
                    %>
                }
            <%

    	} else if (("DELETE").equals(dataAction)) {
    	    int keyCounter = 1;
    		for(Column column : colStruct) {
    			if(column.isDeleteKey()) {
    			    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
    			    String dbType = column.getColumn().getType();
                    %>
					<%
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
	                    if(isEnableDebug) {
	                        %>
	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
	                        <%
	                    	}
                    	 keyCounter++;
                       }
                     //#############
                    %>
    			    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
    			    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_")%>;
                        <%
                    }
    			    keyCounter++;
    			}
    		}
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }
        	%>
        	<%if (rejectConnName == null && useBatchSize && "MYSQL_5".equals(dbVersion)) { // whether use batch
    		%>
    		pstmt_<%=cid %>.addBatch();
			nb_line_<%=cid%>++;
        		<%dbLog.data().addingToBatch(dbLog.var("nb_line"), dbLog.str(dataAction));%>
    		  	<%
    		  	if (useBatchSize && !("").equals(batchSize) && !("0").equals(batchSize)) {
    		  %>
    		  batchSizeCounter_<%=cid%>++;
    		  <%
    		  	}
    		  	%>
    		<%
    		}else {
    		%>
            try {
        	    deletedCount_<%=cid%> = deletedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
            	nb_line_<%=cid%>++;
            	<%dbLog.data().deleting(dbLog.var("nb_line"));%>
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                %>
                	nb_line_<%=cid%>++;
                	<%
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                        %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;

                        <%
                        }
                        %>
                        rejectedCount_<%=cid%> =  rejectedCount_<%=cid%>+ 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;

                        <%
                    } else {
                    	dbLog.logPrintedException("e.getMessage()");
                        %>
                        System.err.print(e.getMessage());
                <%
                    }
                }
                %>
            }
            <%
            } // end whether use batch
            %>
        	<%
    	} else if(("REPLACE").equals(dataAction)) {
    	    int counter = 1;
            for(Column column : colStruct) {
                if(column.isInsertable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" ,  counter, "replaceSQLSplits_")%>;
                        <%
                    }
                    counter++;
                }

            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }
            %>
            int replaceCount_<%=cid%> = 0;
            try {
                replaceCount_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
                <%dbLog.data().replacing(null);%>
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> =  rejectedCount_<%=cid%>+ 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                    	dbLog.logPrintedException("e.getMessage()");
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                }
                %>
            }
            if(replaceCount_<%=cid%> == 1) {
                insertedCount_<%=cid%> += replaceCount_<%=cid%>;
            } else {
                insertedCount_<%=cid%> += 1;
                deletedCount_<%=cid%> += replaceCount_<%=cid%> - 1;
            }
            <%
    	} else if(("INSERT_ON_DUPLICATE_KEY_UPDATE").equals(dataAction)) {
    	    int counter = 1;
            for(Column column : colStruct) {
                if(column.isInsertable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" ,  counter, "insertIgnoreSQLSplits_")%>;
                        <%
                    }
                    counter++;
                }

            }
            for(Column column : colStruct) {
                if(column.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" ,  counter, "insertIgnoreSQLSplits_")%>;
                        <%
                    }
                    counter++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }
            %>
            int count_on_duplicate_key_<%=cid%> = 0;
            try {
                count_on_duplicate_key_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
                <%dbLog.data().insertingOnDuplicateKeyUpdating(null);%>
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> =  rejectedCount_<%=cid%>+ 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                    	dbLog.logPrintedException("e.getMessage()");
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                }
                %>
            }
            if(count_on_duplicate_key_<%=cid%> == 1) {
                insertedCount_<%=cid%> += count_on_duplicate_key_<%=cid%>;
            } else {
                insertedCount_<%=cid%> += 1;
                updatedCount_<%=cid%> += count_on_duplicate_key_<%=cid%> - 1;
            }
            <%
    	}else if(("INSERT_IGNORE").equals(dataAction)) {
    	int counter = 1;
                for(Column column : colStruct) {
                    if(column.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                            <%
                        }
                        counter++;
                    }

                }
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }
                %>
                try {
                    nb_line_<%=cid%>++;
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                    <%dbLog.data().insertingIgnore(dbLog.var("nb_line"));%>
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> =  rejectedCount_<%=cid%>+ 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                        	dbLog.logPrintedException("e.getMessage()");
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    }
                    %>
                }
                <%
    	}


        if(outgoingConns != null && outgoingConns.size() > 0) {
            %>
            if(!whetherReject_<%=cid%>) {
            <%
                for(IConnection outgoingConn : outgoingConns) {
                    if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                        if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {

                            %>
                            <%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                        }
                    }
                }
            %>
            }
            <%
        }
        	//////////batch execute by batch size///////
    	if (extendedInsert && "MYSQL_5".equals(dbVersion) && ("INSERT").equals(dataAction)) {
    		if(!("").equals(numPerInsert ) && !("0").equals(numPerInsert )) {
    		%>
    			if ( batchSize_<%=cid%> <= batchSizeCounter_<%=cid%>) {
                <%if ( (rejectConnName==null)) {
                %>
                try {
						int countSum_<%=cid%> = 0;
                		<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
						for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
							countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : 1);
						}
						<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
            	    	<%if (("INSERT").equals(dataAction)) {
            	    	%>
            	    	insertedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}
            	    	%>
                }catch (java.sql.BatchUpdateException e){
                	<%if(("true").equals(dieOnError)) {
                	%>
                		throw(e);
                	<%
                	}else {
                	%>
                	int countSum_<%=cid%> = 0;
					for(int countEach_<%=cid%>: e.getUpdateCounts()) {
						countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
					}
					<%if (("INSERT").equals(dataAction)) {
            	    %>
            	    insertedCount_<%=cid%> += countSum_<%=cid%>;
	    	    	<%
	    	    	}
	    	    	%>
                	System.err.println(e.getMessage());
                	<%
                	dbLog.logPrintedException("e.getMessage()");
                	}%>
                }
                <%
                }%>

    			batchSizeCounter_<%=cid%> = 0;
    		}
    		<%
    		}

    	}
    	if (useBatchSize && "MYSQL_5".equals(dbVersion) &&(rejectConnName==null)&& (("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction))) {
    		if(!("").equals(batchSize) && !("0").equals(batchSize)) {
    		%>
    			if ( batchSize_<%=cid%> <= batchSizeCounter_<%=cid%>) {
                <%if (rejectConnName==null) {
                %>
                try {
						int countSum_<%=cid%> = 0;
						<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
						for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
							countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
						}
						<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
            	    	<%
            	    	 if (("UPDATE").equals(dataAction)) {
            	    	%>
            	    	updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("DELETE").equals(dataAction)) {
            	    	%>
            	    	deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}%>
            	    	batchSizeCounter_<%=cid%> = 0;
                }catch (java.sql.BatchUpdateException e){
                	<%if(("true").equals(dieOnError)) {
                	%>
                		throw(e);
                	<%
                	}else {
                	%>
                	int countSum_<%=cid%> = 0;
					for(int countEach_<%=cid%>: e.getUpdateCounts()) {
						countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
					}
					<%if (("UPDATE").equals(dataAction)) {%>
            	    updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    <% }else if (("DELETE").equals(dataAction)) {%>
            	    deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    <%}%>
                	System.err.println(e.getMessage());
                	<%
                	dbLog.logPrintedException("e.getMessage()");
                	}%>
                }
                <%
                }%>



    			}
    		<%
    		}

    	}
    	////////////commit every////////////
    	if(!("true").equals(useExistingConn)) {
    		if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
    		    %>
        	    commitCounter_<%=cid%>++;

                if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {

                <%if ((rejectConnName==null && useBatchSize && "MYSQL_5".equals(dbVersion)) && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) ) {
                %>
                try {
                		int countSum_<%=cid%> = 0;
                		<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
						for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
							countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : <%=("INSERT").equals(dataAction)? "1" : "countEach_" +cid%>);
						}
						<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
            	    	<%if (("INSERT").equals(dataAction)) {
            	    	%>
            	    	insertedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("UPDATE").equals(dataAction)) {
            	    	%>
            	    	updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("DELETE").equals(dataAction)) {
            	    	%>
            	    	deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}%>
                }catch (java.sql.BatchUpdateException e){
                	<%if(("true").equals(dieOnError)) {
                	%>
						throw(e);
                	<%
                	}else {
                	%>
                	int countSum_<%=cid%> = 0;
					for(int countEach_<%=cid%>: e.getUpdateCounts()) {
						countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
					}
					<%if (("INSERT").equals(dataAction)) {
        	    	%>
        	    	insertedCount_<%=cid%> += countSum_<%=cid%>;
        	    	<%
        	    	}else if (("UPDATE").equals(dataAction)) {
        	    	%>
        	    	updatedCount_<%=cid%> += countSum_<%=cid%>;
        	    	<%
        	    	}else if (("DELETE").equals(dataAction)) {
        	    	%>
        	    	deletedCount_<%=cid%> += countSum_<%=cid%>;
        	    	<%
        	    	}%>
                    System.err.println(e.getMessage());
                	<%
                	dbLog.logPrintedException("e.getMessage()");
                	}%>

                }
                <%
                }%>
                	<%dbLog.commit().commitTry(null, dbLog.var("commitCounter"));%>
		        	conn_<%=cid%>.commit();
            		<%dbLog.commit().commitDone(null);%>
                	commitCounter_<%=cid%>=0;

                }

                <%
    		}
    	}
    }
%>
